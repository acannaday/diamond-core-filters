#!/usr/bin/python
#
#  Diamond Core Filters - collected filters for the Diamond platform
#
#  Copyright (c) 2011 Carnegie Mellon University
#  All Rights Reserved.
#
#  This software is distributed under the terms of the Eclipse Public
#  License, Version 1.0 which can be found in the file named LICENSE.
#  ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS SOFTWARE CONSTITUTES
#  RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT

# Perceptual hash filter - find similar images using perceptual hashing.
# Implements both average and phash algorithms as described at,
# http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html

from opendiamond.filter import Filter
from opendiamond.filter.parameters import *

from PIL.Image import ANTIALIAS
import numpy as np
try:
    from scipy.fftpack import dct
except ImportError:
    dct = None

class HashFilter(Filter):
    params = (
        StringParameter('function'),
        NumberParameter('size'),
    )
    load_examples = True

    def average_hash(self, img):
        if img.mode != 'RGB': img = img.convert('RGB')
        img = img.resize((self.size, self.size), ANTIALIAS).convert('L')
        return img < np.mean(img)

    def phash(self, img):
        if img.mode != 'RGB': img = img.convert('RGB')
        img = img.resize((32, 32), ANTIALIAS).convert('L')
        img = np.array(img, dtype='float')
        d = dct(dct(img, axis=0), axis=1)[:self.size,:self.size]
        d[0,0] = 0
        return d < np.mean(d)

    def __init__(self, *args, **kwargs):
        Filter.__init__(self, *args, **kwargs)
        if self.function == 'average':
              self.hash_function = self.average_hash
        else: self.hash_function = self.phash
        self.size = int(self.size)
        self.targets = [ self.hash_function(x) for x in self.examples ]

    def __call__(self, obj):
        mask = self.hash_function(obj.image)
        distances = [ np.logical_xor(mask, t).sum() for t in self.targets ]
        return 100 - ((min(distances) * 100.0) / (self.size * self.size))

if __name__ == '__main__':
    HashFilter.run()

